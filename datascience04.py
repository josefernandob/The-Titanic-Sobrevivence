# -*- coding: utf-8 -*-
"""DataScience04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AUvfDh8yUJ9u75LYbYIZl9a-RWoMCy94
"""

from google.colab import files
files.upload()

import pandas as pd
import matplotlib as plt
import seaborn as sns

df_train = pd.read_csv('train.csv')

df_train.info()

"""Observe acima que existem valores incompletos na colunas Age, Cabin e Embarked. Para melhor análise, iremos realizar o tratamento dessas colunas. Mas, antes disso, vamos traduzir os nomes para facilitar nosso trabalho."""

nomes_emPT = {
    'PassengerId': 'IdPassageiro',
    'Survived': 'Sobreviveu',
    'Pclass': 'Classe',
    'Name': 'Nome',
    'Sex': 'Sexo',
    'Age': 'Idade',
    'SibSp': 'Irmaos',
    'Parch': 'Pais',
    'Ticket': 'Bilhete',
    'Fare': 'Tarifa',
    'Cabin': 'Cabine',
    'Embarked': 'Embarque'
}

df_train.rename(columns=nomes_emPT, inplace=True)
df_train.info()

"""Pronto, agora com os nomes das colunas em português, vamos começar preenchendo os dados restantes!"""

df_train = df_train.fillna({
    'Idade': df_train['Idade'].median(),
    'Embarque': df_train['Embarque'].mode()[0],
    'Tarifa': df_train['Tarifa'].median()

})

df_train.info()

"""Pronto, agora que já preenchemos os dados vazios, vamos para o pré-processamento!"""

def preprocess_data(df_train):
  df_train['Familia'] = df_train['Irmaos'] + df_train['Pais'] + 1
  df_train['Sozinho'] = (df_train['Familia'] == 1).astype(int)

  df_train = df_train.drop(['IdPassageiro', 'Nome', 'Bilhete', 'Cabine', 'Irmaos', 'Pais'], axis= 1)

  return df_train

train = preprocess_data(df_train)
train.info()

"""Pronto, agora temos duas possibilidades de acessar o DataFrame: Através da variável de preprocessamento Train, e também através do DataFrame original df_train. Com isso, vamos treinar nosso modelo de Machine Learning!


"""

from sklearn.model_selection import train_test_split

X = train.drop('Sobreviveu', axis=1)
y= train['Sobreviveu']

caracteristicas_numericas = ['Idade', 'Tarifa', 'Familia']
caracteristicas_categoricas = ['Classe', 'Sexo', 'Embarque', 'Sozinho']

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder

preprocessor = ColumnTransformer(transformers=[
    ('num', StandardScaler(), caracteristicas_numericas),
    ('cat', OneHotEncoder(), caracteristicas_categoricas)
])

X_transformado = preprocessor.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_transformado, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
modelo = LogisticRegression(random_state=42)
modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)

from sklearn.metrics import accuracy_score

acuracia = accuracy_score(y_test, y_pred)

print(f"A acurácia do modelo é: {acuracia:.2f}")

"""Agora, vamos treinar com o RandomForest!"""

from sklearn.ensemble import RandomForestClassifier
modelo_rf = RandomForestClassifier(n_estimators=100, random_state=42)
modelo_rf.fit(X_train, y_train)

y_pred_rf = modelo_rf.predict(X_test)


acuracia_rf = accuracy_score(y_test, y_pred_rf)
print(f"A acurácia do modelo RandomForestClassifier é: {acuracia_rf:.2f}")

"""Ótimo, vimos que o desempenho do RandomForest foi consideravelmente superior! Vamos utilizá-lo."""

importancia_caracteristicas = modelo_rf.feature_importances_

nomes_caracteristicas_numericas = preprocessor.named_transformers_['num'].get_feature_names_out()
nomes_caracteristicas_categoricas = preprocessor.named_transformers_['cat'].get_feature_names_out()


nomes_transformados = list(nomes_caracteristicas_numericas) + list(nomes_caracteristicas_categoricas)

importancias = pd.DataFrame({
    'Caracteristica': nomes_transformados,
    'Importancia': importancia_caracteristicas})

importancias = importancias.sort_values(by='Importancia', ascending=False)

print(importancias)

"""Bom, agora com o modelo treinado, vemos que algumas características tiveram mais importância para a sobrevivência. Por exemplo, a característica do Sexo (Dividida em Sexo_Female e Sexo_Male) quando somadas, possuem maior pontuação de importância, assim como a tarifa e idade.

Vamos testar algumas dessas hipóteses abaixo!  

Para isso, recarregaremos nosso dataset original, e criaremos gráficos com base no que o modelo nos forneceu.
"""

df_train2 = pd.read_csv('train.csv')

import matplotlib.pyplot as plt

sns.barplot(x='Sex', y='Survived', data=df_train2, errorbar=('ci', 0))
plt.xlabel('Sexo')
plt.title('Taxa de Sobrevivência por Sexo')
plt.ylabel('Taxa de Sobrevivência')
plt.show()

"""Esse gráfico mostra que a taxa de sobrevivência para o sexo feminino foi consideravelmente superior em comparação ao sexo masculino."""

sns.barplot(x='Pclass', y='Survived', data=df_train2, errorbar=('ci', 0))
plt.title('Taxa de Sobrevivência por Classe')
plt.xlabel('Classe')
plt.ylabel('Taxa de Sobrevivência')
plt.show()

"""Agora, esse gráfico mostra que a sobrevivência para a classe 1 foi bem maior em comparação as outras classes, reforçando a ideia de que os mais ricos tiveram prioridade no resgate."""

sns.barplot(x='Embarked', y='Survived', data=df_train2, errorbar=('ci', 0))
plt.title('Taxa de Sobrevivência por Porto de Embarque')
plt.xlabel('Porto de Embarque')
plt.ylabel('Taxa de Sobrevivência')
plt.savefig('Embarked_Survival_Rate.png')
print('Gráfico de barras da taxa de sobrevivência por porto de embarque criado com sucesso.')

"""Além disso, analisando, vemos que os passageiros que embarcaram pelo portão C, tiveram maior índice de sobrevivência, isso reforça a ideia de que os passageiros mais ricos tiveram prioridade. Uma vez que, C significa Cherbourg, que era de onde os passageiros mais nobres embarcavam.

(C = Cherbourg, Q = Queenstown, S = Southampton).
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(
    x='Age',
    y='Fare',
    hue='Survived',
    data=df_train2,
    palette='viridis'
)

plt.title('Dispersão entre Idade e Tarifa por Sobrevivência')
plt.xlabel('Idade')
plt.ylabel('Tarifa')
plt.legend(title='Sobreviveu', labels=['Não Sobreviveu', 'Sobreviveu'])


plt.savefig('Age_Fare_Survival_Scatter.png')
print('Gráfico de dispersão de Idade vs Tarifa com cores de sobrevivência criado com sucesso.')

"""Por fim, o último gráfico, é o de dispersão!

Aqui, analisamos a idade e a tarifa.

No gráfico, é possível identificar que a maioria das pessoas de tarifa alta sobreviveu, e que pessoas mais jovens (crianças) também tiveram uma sobrevivência maior, independente do valor da tarifa, o que reforça a ideia de que, crianças também era prioridade.
"""

## hope you like it.
love = 'The Titanic Club'
print(love)